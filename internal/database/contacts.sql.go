// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: contacts.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contacts (
    user_id, name, email, phone, company, position, notes
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, name, email, phone, company, position, notes, created_at, updated_at
`

type CreateContactParams struct {
	UserID   uuid.UUID
	Name     string
	Email    sql.NullString
	Phone    sql.NullString
	Company  sql.NullString
	Position sql.NullString
	Notes    sql.NullString
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, createContact,
		arg.UserID,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Company,
		arg.Position,
		arg.Notes,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Company,
		&i.Position,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM contacts
WHERE id = $1 AND user_id = $2
`

type DeleteContactParams struct {
	ID     int64
	UserID uuid.UUID
}

func (q *Queries) DeleteContact(ctx context.Context, arg DeleteContactParams) error {
	_, err := q.db.ExecContext(ctx, deleteContact, arg.ID, arg.UserID)
	return err
}

const getContactByID = `-- name: GetContactByID :one
SELECT id, user_id, name, email, phone, company, position, notes, created_at, updated_at FROM contacts
WHERE id = $1 AND user_id = $2
`

type GetContactByIDParams struct {
	ID     int64
	UserID uuid.UUID
}

func (q *Queries) GetContactByID(ctx context.Context, arg GetContactByIDParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getContactByID, arg.ID, arg.UserID)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Company,
		&i.Position,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getContactsByUser = `-- name: GetContactsByUser :many
SELECT id, user_id, name, email, phone, company, position, notes, created_at, updated_at FROM contacts
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetContactsByUser(ctx context.Context, userID uuid.UUID) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, getContactsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Company,
			&i.Position,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContactsPaginated = `-- name: GetContactsPaginated :many
SELECT id, user_id, name, email, phone, company, position, notes, created_at, updated_at
FROM contacts
WHERE user_id = $1
  AND ($2::bigint IS NULL OR id > $2)
ORDER BY id
LIMIT $3
`

type GetContactsPaginatedParams struct {
	UserID  uuid.UUID
	Column2 int64
	Limit   int32
}

func (q *Queries) GetContactsPaginated(ctx context.Context, arg GetContactsPaginatedParams) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, getContactsPaginated, arg.UserID, arg.Column2, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Company,
			&i.Position,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: UpdateContact :one
UPDATE contacts
SET name = $3,
    email = $4,
    phone = $5,
    company = $6,
    position = $7,
    notes = $8,
    updated_at = NOW()
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, name, email, phone, company, position, notes, created_at, updated_at
`

type UpdateContactParams struct {
	ID       int64
	UserID   uuid.UUID
	Name     string
	Email    sql.NullString
	Phone    sql.NullString
	Company  sql.NullString
	Position sql.NullString
	Notes    sql.NullString
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, updateContact,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Company,
		arg.Position,
		arg.Notes,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Company,
		&i.Position,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
