// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    email,
    first_name,
    last_name,
    password_hash,
    role,
    plan
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, username, email, first_name, last_name, password_hash, email_verified, role, plan, created_at, updated_at
`

type CreateUserParams struct {
	Username     string
	Email        string
	FirstName    string
	LastName     string
	PasswordHash string
	Role         string
	Plan         string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.PasswordHash,
		arg.Role,
		arg.Plan,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.PasswordHash,
		&i.EmailVerified,
		&i.Role,
		&i.Plan,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, first_name, last_name, password_hash, email_verified, role, plan, created_at, updated_at FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.PasswordHash,
		&i.EmailVerified,
		&i.Role,
		&i.Plan,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
