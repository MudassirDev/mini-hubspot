// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    email,
    first_name,
    last_name,
    password_hash,
    role,
    plan,
    verification_token,
    token_sent_at
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, username, email, first_name, last_name, password_hash, email_verified, role, plan, verification_token, token_sent_at, created_at, updated_at
`

type CreateUserParams struct {
	Username          string
	Email             string
	FirstName         string
	LastName          string
	PasswordHash      string
	Role              string
	Plan              string
	VerificationToken sql.NullString
	TokenSentAt       sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.PasswordHash,
		arg.Role,
		arg.Plan,
		arg.VerificationToken,
		arg.TokenSentAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.PasswordHash,
		&i.EmailVerified,
		&i.Role,
		&i.Plan,
		&i.VerificationToken,
		&i.TokenSentAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteExpiredUnverifiedUsers = `-- name: DeleteExpiredUnverifiedUsers :exec
DELETE FROM users
WHERE email_verified = false
  AND token_sent_at < NOW() - INTERVAL '30 days'
`

func (q *Queries) DeleteExpiredUnverifiedUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredUnverifiedUsers)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, first_name, last_name, password_hash, email_verified, role, plan, verification_token, token_sent_at, created_at, updated_at FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.PasswordHash,
		&i.EmailVerified,
		&i.Role,
		&i.Plan,
		&i.VerificationToken,
		&i.TokenSentAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, first_name, last_name, password_hash, email_verified, role, plan, verification_token, token_sent_at, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.PasswordHash,
		&i.EmailVerified,
		&i.Role,
		&i.Plan,
		&i.VerificationToken,
		&i.TokenSentAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByVerificationToken = `-- name: GetUserByVerificationToken :one
SELECT id, username, email, first_name, last_name, password_hash, email_verified, role, plan, verification_token, token_sent_at, created_at, updated_at FROM users
WHERE verification_token = $1
`

func (q *Queries) GetUserByVerificationToken(ctx context.Context, verificationToken sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByVerificationToken, verificationToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.PasswordHash,
		&i.EmailVerified,
		&i.Role,
		&i.Plan,
		&i.VerificationToken,
		&i.TokenSentAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const verifyUserEmail = `-- name: VerifyUserEmail :exec
UPDATE users
SET email_verified = true,
    verification_token = NULL,
    token_sent_at = NULL,
    updated_at = NOW()
WHERE id = $1
`

func (q *Queries) VerifyUserEmail(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, verifyUserEmail, id)
	return err
}
